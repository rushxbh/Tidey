/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Tidey {
  export type EvidenceStruct = {
    evidenceId: BigNumberish;
    volunteer: string;
    photoHash: string;
    mlScore: BigNumberish;
    geoLocation: string;
    timestamp: BigNumberish;
    isApproved: boolean;
    rewardClaimed: boolean;
    description: string;
    tokensAwarded: BigNumberish;
  };

  export type EvidenceStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    boolean,
    string,
    BigNumber
  ] & {
    evidenceId: BigNumber;
    volunteer: string;
    photoHash: string;
    mlScore: BigNumber;
    geoLocation: string;
    timestamp: BigNumber;
    isApproved: boolean;
    rewardClaimed: boolean;
    description: string;
    tokensAwarded: BigNumber;
  };

  export type TaskStruct = {
    taskId: BigNumberish;
    title: string;
    description: string;
    location: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    maxParticipants: BigNumberish;
    currentParticipants: BigNumberish;
    participants: string[];
    isActive: boolean;
    rewardsDistributed: boolean;
    createdBy: string;
    createdTime: BigNumberish;
  };

  export type TaskStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    boolean,
    boolean,
    string,
    BigNumber
  ] & {
    taskId: BigNumber;
    title: string;
    description: string;
    location: string;
    startTime: BigNumber;
    endTime: BigNumber;
    maxParticipants: BigNumber;
    currentParticipants: BigNumber;
    participants: string[];
    isActive: boolean;
    rewardsDistributed: boolean;
    createdBy: string;
    createdTime: BigNumber;
  };

  export type LeaderboardEntryStruct = {
    volunteer: string;
    name: string;
    tokensEarned: BigNumberish;
    evidenceCount: BigNumberish;
    tasksCount: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    volunteer: string;
    name: string;
    tokensEarned: BigNumber;
    evidenceCount: BigNumber;
    tasksCount: BigNumber;
  };

  export type VolunteerStruct = {
    volunteerAddress: string;
    name: string;
    email: string;
    mobile: string;
    registrationTime: BigNumberish;
    totalTokensEarned: BigNumberish;
    evidenceSubmitted: BigNumberish;
    tasksParticipated: BigNumberish;
    isActive: boolean;
    isRegistered: boolean;
  };

  export type VolunteerStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    volunteerAddress: string;
    name: string;
    email: string;
    mobile: string;
    registrationTime: BigNumber;
    totalTokensEarned: BigNumber;
    evidenceSubmitted: BigNumber;
    tasksParticipated: BigNumber;
    isActive: boolean;
    isRegistered: boolean;
  };
}

export interface TideyInterface extends utils.Interface {
  functions: {
    "admins(address)": FunctionFragment;
    "approveEvidence(uint256)": FunctionFragment;
    "approvedEvidenceCount()": FunctionFragment;
    "aquaCoinToken()": FunctionFragment;
    "batchAwardTokens(address[],uint256[],string)": FunctionFragment;
    "createTask(string,string,string,uint256,uint256,uint256)": FunctionFragment;
    "deactivateTask(uint256)": FunctionFragment;
    "distributeTaskRewards(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "evidenceRewardAmount()": FunctionFragment;
    "evidenceSubmissions(uint256)": FunctionFragment;
    "getActiveTasks()": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getEvidenceInfo(uint256)": FunctionFragment;
    "getTaskInfo(uint256)": FunctionFragment;
    "getTopVolunteers(uint256)": FunctionFragment;
    "getVolunteerInfo(address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "joinTask(uint256)": FunctionFragment;
    "minimumMLScore()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "registerVolunteer(string,string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminStatus(address,bool)": FunctionFragment;
    "setVolunteerStatus(address,bool)": FunctionFragment;
    "submitEvidence(string,uint256,string,string)": FunctionFragment;
    "taskParticipation(uint256,address)": FunctionFragment;
    "taskRewardAmount()": FunctionFragment;
    "tasks(uint256)": FunctionFragment;
    "totalEvidenceSubmissions()": FunctionFragment;
    "totalTasks()": FunctionFragment;
    "totalVolunteers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateEvidenceRewardAmount(uint256)": FunctionFragment;
    "updateMinimumMLScore(uint256)": FunctionFragment;
    "updateTaskRewardAmount(uint256)": FunctionFragment;
    "updateVolunteerProfile(string,string,string)": FunctionFragment;
    "volunteerAddresses(uint256)": FunctionFragment;
    "volunteers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admins"
      | "approveEvidence"
      | "approvedEvidenceCount"
      | "aquaCoinToken"
      | "batchAwardTokens"
      | "createTask"
      | "deactivateTask"
      | "distributeTaskRewards"
      | "emergencyWithdraw"
      | "evidenceRewardAmount"
      | "evidenceSubmissions"
      | "getActiveTasks"
      | "getContractStats"
      | "getEvidenceInfo"
      | "getTaskInfo"
      | "getTopVolunteers"
      | "getVolunteerInfo"
      | "isAdmin"
      | "joinTask"
      | "minimumMLScore"
      | "owner"
      | "pause"
      | "paused"
      | "registerVolunteer"
      | "renounceOwnership"
      | "setAdminStatus"
      | "setVolunteerStatus"
      | "submitEvidence"
      | "taskParticipation"
      | "taskRewardAmount"
      | "tasks"
      | "totalEvidenceSubmissions"
      | "totalTasks"
      | "totalVolunteers"
      | "transferOwnership"
      | "unpause"
      | "updateEvidenceRewardAmount"
      | "updateMinimumMLScore"
      | "updateTaskRewardAmount"
      | "updateVolunteerProfile"
      | "volunteerAddresses"
      | "volunteers"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveEvidence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedEvidenceCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aquaCoinToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchAwardTokens",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeTaskRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "evidenceRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evidenceSubmissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTasks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEvidenceInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopVolunteers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVolunteerInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "joinTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumMLScore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerVolunteer",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolunteerStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "taskParticipation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "taskRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalEvidenceSubmissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTasks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolunteers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateEvidenceRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumMLScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaskRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVolunteerProfile",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "volunteerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "volunteers", values: [string]): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedEvidenceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aquaCoinToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAwardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeTaskRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evidenceRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evidenceSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEvidenceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopVolunteers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolunteerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumMLScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVolunteer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolunteerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalEvidenceSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalTasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVolunteers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEvidenceRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumMLScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTaskRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVolunteerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volunteerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "volunteers", data: BytesLike): Result;

  events: {
    "BatchTokensAwarded(address[],uint256[],string)": EventFragment;
    "EvidenceApproved(uint256,address,uint256)": EventFragment;
    "EvidenceSubmitted(uint256,address,string,uint256,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TaskCreated(uint256,string,string,uint256,uint256,uint256,address)": EventFragment;
    "TaskJoined(uint256,address,uint256)": EventFragment;
    "TaskRewardsDistributed(uint256,address[],uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VolunteerRegistered(address,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchTokensAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvidenceApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvidenceSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VolunteerRegistered"): EventFragment;
}

export interface BatchTokensAwardedEventObject {
  recipients: string[];
  amounts: BigNumber[];
  reason: string;
}
export type BatchTokensAwardedEvent = TypedEvent<
  [string[], BigNumber[], string],
  BatchTokensAwardedEventObject
>;

export type BatchTokensAwardedEventFilter =
  TypedEventFilter<BatchTokensAwardedEvent>;

export interface EvidenceApprovedEventObject {
  evidenceId: BigNumber;
  volunteer: string;
  tokensAwarded: BigNumber;
}
export type EvidenceApprovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  EvidenceApprovedEventObject
>;

export type EvidenceApprovedEventFilter =
  TypedEventFilter<EvidenceApprovedEvent>;

export interface EvidenceSubmittedEventObject {
  evidenceId: BigNumber;
  volunteer: string;
  photoHash: string;
  mlScore: BigNumber;
  geoLocation: string;
  timestamp: BigNumber;
}
export type EvidenceSubmittedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, BigNumber],
  EvidenceSubmittedEventObject
>;

export type EvidenceSubmittedEventFilter =
  TypedEventFilter<EvidenceSubmittedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TaskCreatedEventObject {
  taskId: BigNumber;
  title: string;
  location: string;
  startTime: BigNumber;
  endTime: BigNumber;
  maxParticipants: BigNumber;
  createdBy: string;
}
export type TaskCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, string],
  TaskCreatedEventObject
>;

export type TaskCreatedEventFilter = TypedEventFilter<TaskCreatedEvent>;

export interface TaskJoinedEventObject {
  taskId: BigNumber;
  volunteer: string;
  timestamp: BigNumber;
}
export type TaskJoinedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TaskJoinedEventObject
>;

export type TaskJoinedEventFilter = TypedEventFilter<TaskJoinedEvent>;

export interface TaskRewardsDistributedEventObject {
  taskId: BigNumber;
  participants: string[];
  rewardPerParticipant: BigNumber;
  totalRewards: BigNumber;
}
export type TaskRewardsDistributedEvent = TypedEvent<
  [BigNumber, string[], BigNumber, BigNumber],
  TaskRewardsDistributedEventObject
>;

export type TaskRewardsDistributedEventFilter =
  TypedEventFilter<TaskRewardsDistributedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VolunteerRegisteredEventObject {
  volunteer: string;
  name: string;
  email: string;
  timestamp: BigNumber;
}
export type VolunteerRegisteredEvent = TypedEvent<
  [string, string, string, BigNumber],
  VolunteerRegisteredEventObject
>;

export type VolunteerRegisteredEventFilter =
  TypedEventFilter<VolunteerRegisteredEvent>;

export interface Tidey extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TideyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admins(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    approveEvidence(
      _evidenceId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approvedEvidenceCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    aquaCoinToken(overrides?: CallOverrides): Promise<[string]>;

    batchAwardTokens(
      _recipients: string[],
      _amounts: BigNumberish[],
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTask(
      _title: string,
      _description: string,
      _location: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxParticipants: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deactivateTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeTaskRewards(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    evidenceRewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    evidenceSubmissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber
      ] & {
        evidenceId: BigNumber;
        volunteer: string;
        photoHash: string;
        mlScore: BigNumber;
        geoLocation: string;
        timestamp: BigNumber;
        isApproved: boolean;
        rewardClaimed: boolean;
        description: string;
        tokensAwarded: BigNumber;
      }
    >;

    getActiveTasks(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalVolunteers_: BigNumber;
        totalTasks_: BigNumber;
        totalEvidenceSubmissions_: BigNumber;
        approvedEvidenceCount_: BigNumber;
        contractTokenBalance: BigNumber;
      }
    >;

    getEvidenceInfo(
      _evidenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Tidey.EvidenceStructOutput]>;

    getTaskInfo(
      _taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Tidey.TaskStructOutput]>;

    getTopVolunteers(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Tidey.LeaderboardEntryStructOutput[]]>;

    getVolunteerInfo(
      _volunteer: string,
      overrides?: CallOverrides
    ): Promise<[Tidey.VolunteerStructOutput]>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    joinTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    minimumMLScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registerVolunteer(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAdminStatus(
      _admin: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setVolunteerStatus(
      _volunteer: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitEvidence(
      _photoHash: string,
      _mlScore: BigNumberish,
      _geoLocation: string,
      _description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    taskParticipation(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    taskRewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber
      ] & {
        taskId: BigNumber;
        title: string;
        description: string;
        location: string;
        startTime: BigNumber;
        endTime: BigNumber;
        maxParticipants: BigNumber;
        currentParticipants: BigNumber;
        isActive: boolean;
        rewardsDistributed: boolean;
        createdBy: string;
        createdTime: BigNumber;
      }
    >;

    totalEvidenceSubmissions(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTasks(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVolunteers(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateEvidenceRewardAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMinimumMLScore(
      _newMinScore: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTaskRewardAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateVolunteerProfile(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    volunteerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    volunteers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        volunteerAddress: string;
        name: string;
        email: string;
        mobile: string;
        registrationTime: BigNumber;
        totalTokensEarned: BigNumber;
        evidenceSubmitted: BigNumber;
        tasksParticipated: BigNumber;
        isActive: boolean;
        isRegistered: boolean;
      }
    >;
  };

  admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approveEvidence(
    _evidenceId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approvedEvidenceCount(overrides?: CallOverrides): Promise<BigNumber>;

  aquaCoinToken(overrides?: CallOverrides): Promise<string>;

  batchAwardTokens(
    _recipients: string[],
    _amounts: BigNumberish[],
    _reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTask(
    _title: string,
    _description: string,
    _location: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _maxParticipants: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deactivateTask(
    _taskId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeTaskRewards(
    _taskId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  evidenceRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  evidenceSubmissions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      boolean,
      string,
      BigNumber
    ] & {
      evidenceId: BigNumber;
      volunteer: string;
      photoHash: string;
      mlScore: BigNumber;
      geoLocation: string;
      timestamp: BigNumber;
      isApproved: boolean;
      rewardClaimed: boolean;
      description: string;
      tokensAwarded: BigNumber;
    }
  >;

  getActiveTasks(overrides?: CallOverrides): Promise<BigNumber[]>;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalVolunteers_: BigNumber;
      totalTasks_: BigNumber;
      totalEvidenceSubmissions_: BigNumber;
      approvedEvidenceCount_: BigNumber;
      contractTokenBalance: BigNumber;
    }
  >;

  getEvidenceInfo(
    _evidenceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Tidey.EvidenceStructOutput>;

  getTaskInfo(
    _taskId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Tidey.TaskStructOutput>;

  getTopVolunteers(
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Tidey.LeaderboardEntryStructOutput[]>;

  getVolunteerInfo(
    _volunteer: string,
    overrides?: CallOverrides
  ): Promise<Tidey.VolunteerStructOutput>;

  isAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

  joinTask(
    _taskId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  minimumMLScore(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registerVolunteer(
    _name: string,
    _email: string,
    _mobile: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAdminStatus(
    _admin: string,
    _status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setVolunteerStatus(
    _volunteer: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitEvidence(
    _photoHash: string,
    _mlScore: BigNumberish,
    _geoLocation: string,
    _description: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  taskParticipation(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  taskRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  tasks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string,
      BigNumber
    ] & {
      taskId: BigNumber;
      title: string;
      description: string;
      location: string;
      startTime: BigNumber;
      endTime: BigNumber;
      maxParticipants: BigNumber;
      currentParticipants: BigNumber;
      isActive: boolean;
      rewardsDistributed: boolean;
      createdBy: string;
      createdTime: BigNumber;
    }
  >;

  totalEvidenceSubmissions(overrides?: CallOverrides): Promise<BigNumber>;

  totalTasks(overrides?: CallOverrides): Promise<BigNumber>;

  totalVolunteers(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateEvidenceRewardAmount(
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMinimumMLScore(
    _newMinScore: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTaskRewardAmount(
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateVolunteerProfile(
    _name: string,
    _email: string,
    _mobile: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  volunteerAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  volunteers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      volunteerAddress: string;
      name: string;
      email: string;
      mobile: string;
      registrationTime: BigNumber;
      totalTokensEarned: BigNumber;
      evidenceSubmitted: BigNumber;
      tasksParticipated: BigNumber;
      isActive: boolean;
      isRegistered: boolean;
    }
  >;

  callStatic: {
    admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approveEvidence(
      _evidenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedEvidenceCount(overrides?: CallOverrides): Promise<BigNumber>;

    aquaCoinToken(overrides?: CallOverrides): Promise<string>;

    batchAwardTokens(
      _recipients: string[],
      _amounts: BigNumberish[],
      _reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createTask(
      _title: string,
      _description: string,
      _location: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxParticipants: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateTask(
      _taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeTaskRewards(
      _taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    evidenceRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    evidenceSubmissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber
      ] & {
        evidenceId: BigNumber;
        volunteer: string;
        photoHash: string;
        mlScore: BigNumber;
        geoLocation: string;
        timestamp: BigNumber;
        isApproved: boolean;
        rewardClaimed: boolean;
        description: string;
        tokensAwarded: BigNumber;
      }
    >;

    getActiveTasks(overrides?: CallOverrides): Promise<BigNumber[]>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalVolunteers_: BigNumber;
        totalTasks_: BigNumber;
        totalEvidenceSubmissions_: BigNumber;
        approvedEvidenceCount_: BigNumber;
        contractTokenBalance: BigNumber;
      }
    >;

    getEvidenceInfo(
      _evidenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Tidey.EvidenceStructOutput>;

    getTaskInfo(
      _taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Tidey.TaskStructOutput>;

    getTopVolunteers(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Tidey.LeaderboardEntryStructOutput[]>;

    getVolunteerInfo(
      _volunteer: string,
      overrides?: CallOverrides
    ): Promise<Tidey.VolunteerStructOutput>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

    joinTask(_taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    minimumMLScore(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registerVolunteer(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminStatus(
      _admin: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolunteerStatus(
      _volunteer: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitEvidence(
      _photoHash: string,
      _mlScore: BigNumberish,
      _geoLocation: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    taskParticipation(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taskRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber
      ] & {
        taskId: BigNumber;
        title: string;
        description: string;
        location: string;
        startTime: BigNumber;
        endTime: BigNumber;
        maxParticipants: BigNumber;
        currentParticipants: BigNumber;
        isActive: boolean;
        rewardsDistributed: boolean;
        createdBy: string;
        createdTime: BigNumber;
      }
    >;

    totalEvidenceSubmissions(overrides?: CallOverrides): Promise<BigNumber>;

    totalTasks(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolunteers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateEvidenceRewardAmount(
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumMLScore(
      _newMinScore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTaskRewardAmount(
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVolunteerProfile(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: CallOverrides
    ): Promise<void>;

    volunteerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    volunteers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        volunteerAddress: string;
        name: string;
        email: string;
        mobile: string;
        registrationTime: BigNumber;
        totalTokensEarned: BigNumber;
        evidenceSubmitted: BigNumber;
        tasksParticipated: BigNumber;
        isActive: boolean;
        isRegistered: boolean;
      }
    >;
  };

  filters: {
    "BatchTokensAwarded(address[],uint256[],string)"(
      recipients?: null,
      amounts?: null,
      reason?: null
    ): BatchTokensAwardedEventFilter;
    BatchTokensAwarded(
      recipients?: null,
      amounts?: null,
      reason?: null
    ): BatchTokensAwardedEventFilter;

    "EvidenceApproved(uint256,address,uint256)"(
      evidenceId?: BigNumberish | null,
      volunteer?: string | null,
      tokensAwarded?: null
    ): EvidenceApprovedEventFilter;
    EvidenceApproved(
      evidenceId?: BigNumberish | null,
      volunteer?: string | null,
      tokensAwarded?: null
    ): EvidenceApprovedEventFilter;

    "EvidenceSubmitted(uint256,address,string,uint256,string,uint256)"(
      evidenceId?: BigNumberish | null,
      volunteer?: string | null,
      photoHash?: null,
      mlScore?: null,
      geoLocation?: null,
      timestamp?: null
    ): EvidenceSubmittedEventFilter;
    EvidenceSubmitted(
      evidenceId?: BigNumberish | null,
      volunteer?: string | null,
      photoHash?: null,
      mlScore?: null,
      geoLocation?: null,
      timestamp?: null
    ): EvidenceSubmittedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TaskCreated(uint256,string,string,uint256,uint256,uint256,address)"(
      taskId?: BigNumberish | null,
      title?: null,
      location?: null,
      startTime?: null,
      endTime?: null,
      maxParticipants?: null,
      createdBy?: string | null
    ): TaskCreatedEventFilter;
    TaskCreated(
      taskId?: BigNumberish | null,
      title?: null,
      location?: null,
      startTime?: null,
      endTime?: null,
      maxParticipants?: null,
      createdBy?: string | null
    ): TaskCreatedEventFilter;

    "TaskJoined(uint256,address,uint256)"(
      taskId?: BigNumberish | null,
      volunteer?: string | null,
      timestamp?: null
    ): TaskJoinedEventFilter;
    TaskJoined(
      taskId?: BigNumberish | null,
      volunteer?: string | null,
      timestamp?: null
    ): TaskJoinedEventFilter;

    "TaskRewardsDistributed(uint256,address[],uint256,uint256)"(
      taskId?: BigNumberish | null,
      participants?: null,
      rewardPerParticipant?: null,
      totalRewards?: null
    ): TaskRewardsDistributedEventFilter;
    TaskRewardsDistributed(
      taskId?: BigNumberish | null,
      participants?: null,
      rewardPerParticipant?: null,
      totalRewards?: null
    ): TaskRewardsDistributedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "VolunteerRegistered(address,string,string,uint256)"(
      volunteer?: string | null,
      name?: null,
      email?: null,
      timestamp?: null
    ): VolunteerRegisteredEventFilter;
    VolunteerRegistered(
      volunteer?: string | null,
      name?: null,
      email?: null,
      timestamp?: null
    ): VolunteerRegisteredEventFilter;
  };

  estimateGas: {
    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approveEvidence(
      _evidenceId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approvedEvidenceCount(overrides?: CallOverrides): Promise<BigNumber>;

    aquaCoinToken(overrides?: CallOverrides): Promise<BigNumber>;

    batchAwardTokens(
      _recipients: string[],
      _amounts: BigNumberish[],
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTask(
      _title: string,
      _description: string,
      _location: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxParticipants: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deactivateTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeTaskRewards(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    evidenceRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    evidenceSubmissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveTasks(overrides?: CallOverrides): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getEvidenceInfo(
      _evidenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskInfo(
      _taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopVolunteers(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolunteerInfo(
      _volunteer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    joinTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    minimumMLScore(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registerVolunteer(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAdminStatus(
      _admin: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setVolunteerStatus(
      _volunteer: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitEvidence(
      _photoHash: string,
      _mlScore: BigNumberish,
      _geoLocation: string,
      _description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    taskParticipation(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tasks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalEvidenceSubmissions(overrides?: CallOverrides): Promise<BigNumber>;

    totalTasks(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolunteers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateEvidenceRewardAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMinimumMLScore(
      _newMinScore: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTaskRewardAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateVolunteerProfile(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    volunteerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volunteers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveEvidence(
      _evidenceId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approvedEvidenceCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aquaCoinToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchAwardTokens(
      _recipients: string[],
      _amounts: BigNumberish[],
      _reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTask(
      _title: string,
      _description: string,
      _location: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxParticipants: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deactivateTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeTaskRewards(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    evidenceRewardAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evidenceSubmissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveTasks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEvidenceInfo(
      _evidenceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskInfo(
      _taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopVolunteers(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolunteerInfo(
      _volunteer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    minimumMLScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerVolunteer(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAdminStatus(
      _admin: string,
      _status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setVolunteerStatus(
      _volunteer: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      _photoHash: string,
      _mlScore: BigNumberish,
      _geoLocation: string,
      _description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    taskParticipation(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskRewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEvidenceSubmissions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTasks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolunteers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateEvidenceRewardAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMinimumMLScore(
      _newMinScore: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTaskRewardAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateVolunteerProfile(
      _name: string,
      _email: string,
      _mobile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    volunteerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volunteers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
